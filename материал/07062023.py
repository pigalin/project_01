"""
# КАЛЬКУЛЯТОР
print ('Буква q закроет калькулятор')
while True:
    s = input("Знак (+,-,*,/,%):")
    if s == 'q':
        break
    if s in ('+','-','*','/','%'):
        if s == '%':
            print ('x - число, от которого берем %')
            print ('y - % который берем')
        x = float(input('x = '))
        y = float(input('y = '))
        if s == '+':
            print ("%.2f" % (x + y))
        elif s == '-':
            print ("%.2f" % (x - y))
        elif s == '*':
            print ("%.2f" % (x * y))
        elif s == '%':
            print ("%.2f" % (x / 100 *y))
        elif s == '/':
          if y != 0:
              print ("%.2f" % (x / y))
          else:
              print ('Деление на 0')
        else:
            print ("Неверный знак операции")  



a = 44
b = 12

while a != 0 and b != 0:
    if a > b:
        a = a % b
    else:
        b = b % a

print(a + b)    
"""
"""
a = 35
b = 14
while a != b:
    if a > b:
        a = a - b
        print(a)
    else    
"""

# -*- coding: utf-8 -*-
"""07_06_2023_4potok.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qLvdS4ZnFmRVHQ_dtGHubJH9taSIDrC7


print ('Буква q закроет калькулятор')
while True:
  s = input("Знак (+,-,*,/,%):")
  if s == 'q':
    break
  if s in ('+','-','*','/','%'):
    if s == '%':
      print ('x - число, от которого берем %')
      print ('y - % который берем')
    x = float(input('x = '))
    y = float(input('y = '))
    if s == '+':
      print ("%.2f" % (x + y))
    elif s == '-':
      print ("%.2f" % (x - y))
    elif s == '*':
      print ("%.2f" % (x * y))
    elif s == '%':
      print ("%.2f" % (x / 100 * y))
    elif s == '/':
      if y != 0:
        print ("%.2f" % (x / y))
      else:
        print ('Деление на 0')
  else:
    print ("Неверный знак операции")

a = 44
b = 12

while a != 0 and b != 0:
  if a > b:
    a = a % b
    print (a)
  else:
    b = b % a
    print (b)

print (a + b)

a = 35
b = 14

while a != b:
  if a > b:
    a = a - b
    print (a)
  else:
    b = b - a
    print(b)

#print (b)

from datetime import datetime
arr = [[4,6,2,1,9,63,-134,566],[-52, 56, 30, 29, -54, 0, -110],[42, 54, 65, 87, 0], [5]]

def choice(data):
  i = 0
  length = len(data)
  while i < length - 1:
    m = i
    j = i + 1
    while j < length:
      if data[j] < data[m]:
        m = j
      j += 1
    data[i], data[m] = data[m], data[i]
    i += 1
  return data

def bubble_for(data):
  for i in range(len(data)- 1):
    for j in range (len(data)-i-1):
      if data[j] > data[j+1]:
        data[j], data[j+1] = data[j+1], data[j]
  return data

def bubble_while(data):
  i = 0
  while i < len(data) - 1:
    j = 0
    while j < len(data) - 1 - i:
      if data[j] > data[j+1]:
        data[j], data[j+1] = data[j+1], data[j]
      j += 1
    i += 1
  return data

def default(data):
  data.sort()
  return data

def insertion(data):
  for i in range(len(data)):
    j = i - 1
    val = data[i]
    while data[j] > val and j >= 0:
      data[j + 1] = data[j]
      j -= 1
    data[j + 1] = val
  return data

def minimum(arr):
    print ('МИНИМАЛЬНЫЕ ЗНАЧЕНИЯ')
    print ('Метод choice')
    start_time = datetime.now()
    for data in arr:
      print ("Минимальное значение из массива: ", data, choice(data)[0])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  bubble for')
    start_time = datetime.now()
    for data in arr:
      print ("Минимальное значение из массива: ", data, bubble_for(data)[0])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  bubble while')
    start_time = datetime.now()
    for data in arr:
      print ("Минимальное значение из массива: ", data, bubble_while(data)[0])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  default')
    start_time = datetime.now()
    for data in arr:
      print ("Минимальное значение из массива: ", data, default(data)[0])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  insertion')
    start_time = datetime.now()
    for data in arr:
      print ("Минимальное значение из массива: ", data, insertion(data)[0])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))

def maximum(arr):
    print ('МАКСИМАЛЬНЫЕ ЗНАЧЕНИЯ')
    print ('Метод choice')
    start_time = datetime.now()
    for data in arr:
      print ("Максимальное значение из массива: ", data, choice(data)[len(data) - 1])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  bubble for')
    start_time = datetime.now()
    for data in arr:
      print ("Максимальное значение из массива: ", data, bubble_for(data)[len(data) - 1])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  bubble while')
    start_time = datetime.now()
    for data in arr:
      print ("Максимальное значение из массива: ", data, bubble_while(data)[len(data) - 1])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  default')
    start_time = datetime.now()
    for data in arr:
      print ("Максимальное значение из массива: ", data, default(data)[len(data) - 1])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))
    print ('Метод  insertion')
    start_time = datetime.now()
    for data in arr:
      print ("Максимальное значение из массива: ", data, insertion(data)[len(data) - 1])
    end_time = datetime.now()
    print ("Продолжительность: {}".format(end_time - start_time))


def main():
  print (minimum(arr))
  print (maximum(arr))

print (main())

data = [12, 4, 54, 29, 46, 36, 72, 99, 85]

def choice(data):
  i = 0
  length = len(data)
  while i < length - 1:
    m = i
    j = i + 1
    while j < length:
      if data[j] < data[m]:
        m = j
      j += 1
    data[i], data[m] = data[m], data[i]
    i += 1
  return data

choice(data)
"""